Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0023]	25.7+0.3s
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0023]	25.6+0.3s
[1800/18000]	[VGG22: 0.0017]	25.3+0.3s
[2700/18000]	[VGG22: 0.0015]	25.5+0.3s
[3600/18000]	[VGG22: 0.0013]	25.3+0.3s
[4500/18000]	[VGG22: 0.0012]	25.2+0.3s
[5400/18000]	[VGG22: 0.0012]	25.2+0.3s
[6300/18000]	[VGG22: 0.0011]	25.2+0.3s
[7200/18000]	[VGG22: 0.0011]	25.2+0.3s
[8100/18000]	[VGG22: 0.0011]	25.3+0.3s
[9000/18000]	[VGG22: 0.0010]	25.3+0.3s
[9900/18000]	[VGG22: 0.0010]	25.3+0.3s
[10800/18000]	[VGG22: 0.0010]	25.3+0.3s
[11700/18000]	[VGG22: 0.0010]	25.3+0.3s
[12600/18000]	[VGG22: 0.0010]	25.3+0.3s
[13500/18000]	[VGG22: 0.0009]	25.3+0.3s
[14400/18000]	[VGG22: 0.0009]	25.3+0.3s
[15300/18000]	[VGG22: 0.0009]	25.3+0.3s
[16200/18000]	[VGG22: 0.0009]	25.3+0.3s
[17100/18000]	[VGG22: 0.0009]	25.4+0.3s
[18000/18000]	[VGG22: 0.0009]	25.6+0.3s

Evaluation:
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0020]	25.7+0.3s
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0021]	25.8+0.3s
[1800/18000]	[VGG22: 0.0016]	25.5+0.3s
[2700/18000]	[VGG22: 0.0014]	25.6+0.3s
[3600/18000]	[VGG22: 0.0013]	25.6+0.3s
[4500/18000]	[VGG22: 0.0012]	25.6+0.3s
[5400/18000]	[VGG22: 0.0011]	25.5+0.3s
[6300/18000]	[VGG22: 0.0011]	25.6+0.3s
[7200/18000]	[VGG22: 0.0010]	25.6+0.3s
[8100/18000]	[VGG22: 0.0010]	25.6+0.3s
[9000/18000]	[VGG22: 0.0010]	25.6+0.3s
[9900/18000]	[VGG22: 0.0010]	25.6+0.3s
[10800/18000]	[VGG22: 0.0010]	25.6+0.3s
[11700/18000]	[VGG22: 0.0009]	25.7+0.3s
[12600/18000]	[VGG22: 0.0009]	25.7+0.3s
[13500/18000]	[VGG22: 0.0009]	25.6+0.3s
[14400/18000]	[VGG22: 0.0009]	25.7+0.3s
[15300/18000]	[VGG22: 0.0009]	25.7+0.3s
[16200/18000]	[VGG22: 0.0009]	25.7+0.3s
[17100/18000]	[VGG22: 0.0009]	25.7+0.3s
[18000/18000]	[VGG22: 0.0009]	25.7+0.3s

Evaluation:
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0021]	25.9+0.3s
[1800/18000]	[VGG22: 0.0016]	25.6+0.3s
[2700/18000]	[VGG22: 0.0014]	25.7+0.3s
[3600/18000]	[VGG22: 0.0013]	25.7+0.3s
[4500/18000]	[VGG22: 0.0012]	25.8+0.3s
[5400/18000]	[VGG22: 0.0011]	25.8+0.3s
[6300/18000]	[VGG22: 0.0011]	25.8+0.3s
[7200/18000]	[VGG22: 0.0011]	25.9+0.3s
[8100/18000]	[VGG22: 0.0010]	25.9+0.3s
[9000/18000]	[VGG22: 0.0010]	25.9+0.3s
[9900/18000]	[VGG22: 0.0010]	25.9+0.3s
[10800/18000]	[VGG22: 0.0010]	26.0+0.3s
[11700/18000]	[VGG22: 0.0010]	26.0+0.3s
[12600/18000]	[VGG22: 0.0010]	26.0+0.3s
[13500/18000]	[VGG22: 0.0009]	26.0+0.3s
[14400/18000]	[VGG22: 0.0009]	26.0+0.3s
[15300/18000]	[VGG22: 0.0009]	26.0+0.3s
[16200/18000]	[VGG22: 0.0009]	26.0+0.3s
[17100/18000]	[VGG22: 0.0009]	26.0+0.3s
[18000/18000]	[VGG22: 0.0009]	26.0+0.3s

Evaluation:
Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-5
[Epoch 2]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0021]	25.5+0.3s
[1800/18000]	[VGG22: 0.0017]	25.3+0.3s
[2700/18000]	[VGG22: 0.0014]	25.3+0.3s
[3600/18000]	[VGG22: 0.0013]	25.4+0.3s
[4500/18000]	[VGG22: 0.0012]	25.4+0.3s
[5400/18000]	[VGG22: 0.0011]	25.5+0.3s
[6300/18000]	[VGG22: 0.0011]	25.5+0.3s
[7200/18000]	[VGG22: 0.0011]	25.5+0.3s
[8100/18000]	[VGG22: 0.0010]	25.5+0.3s
[9000/18000]	[VGG22: 0.0010]	25.5+0.3s
[9900/18000]	[VGG22: 0.0010]	25.6+0.3s
[10800/18000]	[VGG22: 0.0010]	25.6+0.3s
[11700/18000]	[VGG22: 0.0010]	25.6+0.3s
[12600/18000]	[VGG22: 0.0010]	25.6+0.3s
[13500/18000]	[VGG22: 0.0009]	25.5+0.3s
[14400/18000]	[VGG22: 0.0009]	25.4+0.3s
[15300/18000]	[VGG22: 0.0009]	25.4+0.3s
[16200/18000]	[VGG22: 0.0009]	25.4+0.3s
[17100/18000]	[VGG22: 0.0009]	25.4+0.3s
[18000/18000]	[VGG22: 0.0009]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.887 (Best: 0.887 @epoch 2)
Total time: 48.85s

[Epoch 3]	Learning rate: 1.00e-7
[Epoch 3]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0008]	25.6+0.3s
[2700/18000]	[VGG22: 0.0008]	25.7+0.3s
[3600/18000]	[VGG22: 0.0008]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.3+0.3s
[5400/18000]	[VGG22: 0.0007]	25.3+0.3s
[6300/18000]	[VGG22: 0.0007]	25.3+0.3s
[7200/18000]	[VGG22: 0.0007]	25.3+0.3s
[8100/18000]	[VGG22: 0.0007]	25.3+0.3s
[9000/18000]	[VGG22: 0.0007]	25.3+0.3s
[9900/18000]	[VGG22: 0.0007]	25.3+0.3s
[10800/18000]	[VGG22: 0.0007]	25.3+0.3s
[11700/18000]	[VGG22: 0.0007]	25.3+0.3s
[12600/18000]	[VGG22: 0.0007]	25.3+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.3+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.893 (Best: 0.893 @epoch 3)
Total time: 48.89s

[Epoch 4]	Learning rate: 1.00e-8
[Epoch 4]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.4+0.3s
[1800/18000]	[VGG22: 0.0007]	25.4+0.3s
[2700/18000]	[VGG22: 0.0007]	25.3+0.3s
[3600/18000]	[VGG22: 0.0007]	25.3+0.3s
[4500/18000]	[VGG22: 0.0007]	25.4+0.3s
[5400/18000]	[VGG22: 0.0007]	25.4+0.3s
[6300/18000]	[VGG22: 0.0007]	25.4+0.3s
[7200/18000]	[VGG22: 0.0007]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.4+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.5+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.889 (Best: 0.893 @epoch 3)
Total time: 48.95s

[Epoch 5]	Learning rate: 1.00e-7
[Epoch 5]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0007]	25.5+0.3s
[7200/18000]	[VGG22: 0.0007]	25.5+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.7+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.890 (Best: 0.893 @epoch 3)
Total time: 48.87s

[Epoch 6]	Learning rate: 1.00e-7
[Epoch 6]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.7+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.894 (Best: 0.894 @epoch 6)
Total time: 48.92s

[Epoch 7]	Learning rate: 1.00e-7
[Epoch 7]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.6+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.5+0.3s
[13500/18000]	[VGG22: 0.0007]	25.5+0.3s
[14400/18000]	[VGG22: 0.0007]	25.5+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.886 (Best: 0.894 @epoch 6)
Total time: 48.95s

[Epoch 8]	Learning rate: 1.00e-7
[Epoch 8]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.5+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.4+0.3s
[6300/18000]	[VGG22: 0.0007]	25.4+0.3s
[7200/18000]	[VGG22: 0.0007]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.4+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.891 (Best: 0.894 @epoch 6)
Total time: 48.99s

[Epoch 9]	Learning rate: 1.00e-7
[Epoch 9]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.8+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.5+0.3s
[9900/18000]	[VGG22: 0.0007]	25.5+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.9+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.7+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.885 (Best: 0.894 @epoch 6)
Total time: 48.88s

[Epoch 10]	Learning rate: 1.00e-7
[Epoch 10]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.7+0.3s
[15300/18000]	[VGG22: 0.0007]	25.8+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.891 (Best: 0.894 @epoch 6)
Total time: 48.99s

[Epoch 11]	Learning rate: 1.00e-7
[Epoch 11]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.5+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0006]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.5+0.3s
[12600/18000]	[VGG22: 0.0007]	25.8+0.3s
[13500/18000]	[VGG22: 0.0007]	25.5+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.887 (Best: 0.894 @epoch 6)
Total time: 48.90s

[Epoch 12]	Learning rate: 1.00e-7
[Epoch 12]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.4+0.3s
[1800/18000]	[VGG22: 0.0007]	25.4+0.3s
[2700/18000]	[VGG22: 0.0007]	25.4+0.3s
[3600/18000]	[VGG22: 0.0007]	25.4+0.3s
[4500/18000]	[VGG22: 0.0007]	25.4+0.3s
[5400/18000]	[VGG22: 0.0007]	25.4+0.3s
[6300/18000]	[VGG22: 0.0007]	25.4+0.3s
[7200/18000]	[VGG22: 0.0007]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.4+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.5+0.3s
[15300/18000]	[VGG22: 0.0007]	25.5+0.3s
[16200/18000]	[VGG22: 0.0007]	25.5+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.896 (Best: 0.896 @epoch 12)
Total time: 48.98s

[Epoch 13]	Learning rate: 1.00e-7
[Epoch 13]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.6+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.897 @epoch 13)
Total time: 48.95s

[Epoch 14]	Learning rate: 1.00e-7
[Epoch 14]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.8+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.5+0.3s
[17100/18000]	[VGG22: 0.0007]	25.5+0.3s
[18000/18000]	[VGG22: 0.0007]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.890 (Best: 0.897 @epoch 13)
Total time: 48.94s

[Epoch 15]	Learning rate: 1.00e-7
[Epoch 15]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.8+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.5+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.897 @epoch 13)
Total time: 49.00s

[Epoch 16]	Learning rate: 1.00e-7
[Epoch 16]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0007]	25.5+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.890 (Best: 0.897 @epoch 13)
Total time: 49.01s

[Epoch 17]	Learning rate: 1.00e-7
[Epoch 17]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.898 (Best: 0.898 @epoch 17)
Total time: 48.89s

[Epoch 18]	Learning rate: 1.00e-7
[Epoch 18]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.4+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.5+0.3s
[7200/18000]	[VGG22: 0.0007]	25.5+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.887 (Best: 0.898 @epoch 17)
Total time: 48.97s

[Epoch 19]	Learning rate: 1.00e-7
[Epoch 19]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.898 @epoch 17)
Total time: 48.97s

[Epoch 20]	Learning rate: 1.00e-7
[Epoch 20]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.5+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.888 (Best: 0.898 @epoch 17)
Total time: 49.00s

[Epoch 21]	Learning rate: 1.00e-7
[Epoch 21]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.4+0.3s
[1800/18000]	[VGG22: 0.0006]	25.4+0.3s
[2700/18000]	[VGG22: 0.0006]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0006]	25.4+0.3s
[5400/18000]	[VGG22: 0.0006]	25.4+0.3s
[6300/18000]	[VGG22: 0.0006]	25.4+0.3s
[7200/18000]	[VGG22: 0.0006]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.4+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0006]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.885 (Best: 0.898 @epoch 17)
Total time: 49.05s

[Epoch 22]	Learning rate: 1.00e-7
[Epoch 22]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.9+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.898 @epoch 17)
Total time: 49.00s

[Epoch 23]	Learning rate: 1.00e-7
[Epoch 23]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.8+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.8+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.8+0.3s
[11700/18000]	[VGG22: 0.0007]	25.8+0.3s
[12600/18000]	[VGG22: 0.0007]	25.8+0.3s
[13500/18000]	[VGG22: 0.0007]	25.8+0.3s
[14400/18000]	[VGG22: 0.0007]	25.8+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.8+0.3s
[17100/18000]	[VGG22: 0.0007]	25.8+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.888 (Best: 0.898 @epoch 17)
Total time: 48.97s

[Epoch 24]	Learning rate: 1.00e-7
[Epoch 24]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.5+0.3s
[7200/18000]	[VGG22: 0.0007]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.5+0.3s
[9000/18000]	[VGG22: 0.0007]	25.5+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.4+0.3s
[11700/18000]	[VGG22: 0.0007]	25.4+0.3s
[12600/18000]	[VGG22: 0.0007]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.5+0.3s
[14400/18000]	[VGG22: 0.0007]	25.4+0.3s
[15300/18000]	[VGG22: 0.0007]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.5+0.3s
[17100/18000]	[VGG22: 0.0007]	25.5+0.3s
[18000/18000]	[VGG22: 0.0007]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.888 (Best: 0.898 @epoch 17)
Total time: 48.98s

[Epoch 25]	Learning rate: 1.00e-7
[Epoch 25]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.5+0.3s
[1800/18000]	[VGG22: 0.0007]	25.5+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.898 (Best: 0.898 @epoch 17)
Total time: 49.01s

[Epoch 26]	Learning rate: 1.00e-7
[Epoch 26]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.898 (Best: 0.898 @epoch 26)
Total time: 49.04s

[Epoch 27]	Learning rate: 1.00e-7
[Epoch 27]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.6+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.5+0.3s
[12600/18000]	[VGG22: 0.0007]	25.5+0.3s
[13500/18000]	[VGG22: 0.0007]	25.5+0.3s
[14400/18000]	[VGG22: 0.0007]	25.5+0.3s
[15300/18000]	[VGG22: 0.0007]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.4+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.890 (Best: 0.898 @epoch 26)
Total time: 49.02s

[Epoch 28]	Learning rate: 1.00e-7
[Epoch 28]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0007]	25.4+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.4+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.5+0.3s
[11700/18000]	[VGG22: 0.0006]	25.4+0.3s
[12600/18000]	[VGG22: 0.0006]	25.4+0.3s
[13500/18000]	[VGG22: 0.0006]	25.4+0.3s
[14400/18000]	[VGG22: 0.0006]	25.4+0.3s
[15300/18000]	[VGG22: 0.0006]	25.4+0.3s
[16200/18000]	[VGG22: 0.0006]	25.4+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.898 @epoch 26)
Total time: 49.01s

[Epoch 29]	Learning rate: 1.00e-7
[Epoch 29]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.4+0.3s
[2700/18000]	[VGG22: 0.0007]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0006]	25.4+0.3s
[5400/18000]	[VGG22: 0.0006]	25.4+0.3s
[6300/18000]	[VGG22: 0.0006]	25.4+0.3s
[7200/18000]	[VGG22: 0.0006]	25.4+0.3s
[8100/18000]	[VGG22: 0.0006]	25.4+0.3s
[9000/18000]	[VGG22: 0.0006]	25.4+0.3s
[9900/18000]	[VGG22: 0.0006]	25.4+0.3s
[10800/18000]	[VGG22: 0.0006]	25.4+0.3s
[11700/18000]	[VGG22: 0.0006]	25.4+0.3s
[12600/18000]	[VGG22: 0.0006]	25.4+0.3s
[13500/18000]	[VGG22: 0.0006]	25.4+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.893 (Best: 0.898 @epoch 26)
Total time: 49.03s

[Epoch 30]	Learning rate: 1.00e-7
[Epoch 30]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.887 (Best: 0.898 @epoch 26)
Total time: 49.05s

[Epoch 31]	Learning rate: 1.00e-7
[Epoch 31]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.8+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.8+0.3s
[8100/18000]	[VGG22: 0.0007]	25.8+0.3s
[9000/18000]	[VGG22: 0.0006]	25.8+0.3s
[9900/18000]	[VGG22: 0.0006]	25.8+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.8+0.3s
[14400/18000]	[VGG22: 0.0007]	25.8+0.3s
[15300/18000]	[VGG22: 0.0007]	25.8+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.8+0.3s
[18000/18000]	[VGG22: 0.0007]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.883 (Best: 0.898 @epoch 26)
Total time: 48.99s

[Epoch 32]	Learning rate: 1.00e-7
[Epoch 32]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.8+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.6+0.3s
[4500/18000]	[VGG22: 0.0007]	25.6+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.5+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.5+0.3s
[18000/18000]	[VGG22: 0.0007]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.898 @epoch 26)
Total time: 49.03s

[Epoch 33]	Learning rate: 1.00e-7
[Epoch 33]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.5+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0007]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.4+0.3s
[17100/18000]	[VGG22: 0.0006]	25.4+0.3s
[18000/18000]	[VGG22: 0.0006]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.891 (Best: 0.898 @epoch 26)
Total time: 48.96s

[Epoch 34]	Learning rate: 1.00e-7
[Epoch 34]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.5+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.886 (Best: 0.898 @epoch 26)
Total time: 49.00s

[Epoch 35]	Learning rate: 1.00e-7
[Epoch 35]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0007]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0007]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0007]	25.5+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.4+0.3s
[13500/18000]	[VGG22: 0.0007]	25.4+0.3s
[14400/18000]	[VGG22: 0.0006]	25.4+0.3s
[15300/18000]	[VGG22: 0.0006]	25.4+0.3s
[16200/18000]	[VGG22: 0.0007]	25.4+0.3s
[17100/18000]	[VGG22: 0.0007]	25.4+0.3s
[18000/18000]	[VGG22: 0.0007]	25.4+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.894 (Best: 0.898 @epoch 26)
Total time: 49.04s

[Epoch 36]	Learning rate: 1.00e-7
[Epoch 36]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.892 (Best: 0.898 @epoch 26)
Total time: 49.06s

[Epoch 37]	Learning rate: 1.00e-7
[Epoch 37]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.887 (Best: 0.898 @epoch 26)
Total time: 49.01s

[Epoch 38]	Learning rate: 1.00e-7
[Epoch 38]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.8+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0007]	25.7+0.3s
[15300/18000]	[VGG22: 0.0007]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.7+0.3s
[17100/18000]	[VGG22: 0.0007]	25.7+0.3s
[18000/18000]	[VGG22: 0.0007]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.891 (Best: 0.898 @epoch 26)
Total time: 49.00s

[Epoch 39]	Learning rate: 1.00e-7
[Epoch 39]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.8+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.8+0.3s
[16200/18000]	[VGG22: 0.0006]	25.8+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.898 @epoch 26)
Total time: 49.01s

[Epoch 40]	Learning rate: 1.00e-7
[Epoch 40]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0006]	25.8+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.8+0.3s
[7200/18000]	[VGG22: 0.0006]	25.8+0.3s
[8100/18000]	[VGG22: 0.0006]	25.8+0.3s
[9000/18000]	[VGG22: 0.0006]	25.8+0.3s
[9900/18000]	[VGG22: 0.0006]	25.8+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.8+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.8+0.3s
[16200/18000]	[VGG22: 0.0007]	25.8+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.891 (Best: 0.898 @epoch 26)
Total time: 49.03s

[Epoch 41]	Learning rate: 1.00e-7
[Epoch 41]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0006]	25.8+0.3s
[2700/18000]	[VGG22: 0.0006]	25.8+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.8+0.3s
[7200/18000]	[VGG22: 0.0006]	25.8+0.3s
[8100/18000]	[VGG22: 0.0006]	25.8+0.3s
[9000/18000]	[VGG22: 0.0006]	25.8+0.3s
[9900/18000]	[VGG22: 0.0006]	25.8+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.8+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.8+0.3s
[16200/18000]	[VGG22: 0.0006]	25.8+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.898 @epoch 26)
Total time: 49.07s

[Epoch 42]	Learning rate: 1.00e-7
[Epoch 42]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.8+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0007]	25.8+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.8+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.877 (Best: 0.898 @epoch 26)
Total time: 49.06s

[Epoch 43]	Learning rate: 1.00e-7
[Epoch 43]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0007]	25.7+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.7+0.3s
[12600/18000]	[VGG22: 0.0007]	25.7+0.3s
[13500/18000]	[VGG22: 0.0007]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.893 (Best: 0.898 @epoch 26)
Total time: 49.06s

[Epoch 44]	Learning rate: 1.00e-7
[Epoch 44]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.5+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.885 (Best: 0.898 @epoch 26)
Total time: 49.01s

[Epoch 45]	Learning rate: 1.00e-7
[Epoch 45]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.6+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.881 (Best: 0.898 @epoch 26)
Total time: 49.00s

[Epoch 46]	Learning rate: 1.00e-7
[Epoch 46]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.890 (Best: 0.898 @epoch 26)
Total time: 49.05s

[Epoch 47]	Learning rate: 1.00e-7
[Epoch 47]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.892 (Best: 0.898 @epoch 26)
Total time: 49.05s

[Epoch 48]	Learning rate: 1.00e-7
[Epoch 48]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0007]	25.6+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.5+0.3s
[5400/18000]	[VGG22: 0.0007]	25.5+0.3s
[6300/18000]	[VGG22: 0.0007]	25.6+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0007]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.7+0.3s
[11700/18000]	[VGG22: 0.0007]	25.6+0.3s
[12600/18000]	[VGG22: 0.0007]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.898 @epoch 26)
Total time: 49.04s

[Epoch 49]	Learning rate: 1.00e-7
[Epoch 49]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.5+0.3s
[11700/18000]	[VGG22: 0.0006]	25.5+0.3s
[12600/18000]	[VGG22: 0.0006]	25.5+0.3s
[13500/18000]	[VGG22: 0.0006]	25.5+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.5+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.894 (Best: 0.898 @epoch 26)
Total time: 49.39s

[Epoch 50]	Learning rate: 1.00e-7
[Epoch 50]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0007]	25.5+0.3s
[2700/18000]	[VGG22: 0.0007]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0006]	25.4+0.3s
[5400/18000]	[VGG22: 0.0006]	25.4+0.3s
[6300/18000]	[VGG22: 0.0006]	25.4+0.3s
[7200/18000]	[VGG22: 0.0006]	25.4+0.3s
[8100/18000]	[VGG22: 0.0007]	25.4+0.3s
[9000/18000]	[VGG22: 0.0007]	25.4+0.3s
[9900/18000]	[VGG22: 0.0007]	25.4+0.3s
[10800/18000]	[VGG22: 0.0007]	25.5+0.3s
[11700/18000]	[VGG22: 0.0007]	25.5+0.3s
[12600/18000]	[VGG22: 0.0007]	25.5+0.3s
[13500/18000]	[VGG22: 0.0006]	25.5+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.4+0.3s
[16200/18000]	[VGG22: 0.0006]	25.4+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.898 @epoch 26)
Total time: 49.05s

[Epoch 51]	Learning rate: 1.00e-7
[Epoch 51]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.4+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.9+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.900 (Best: 0.900 @epoch 51)
Total time: 49.01s

[Epoch 52]	Learning rate: 1.00e-7
[Epoch 52]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.888 (Best: 0.900 @epoch 51)
Total time: 49.04s

[Epoch 53]	Learning rate: 1.00e-7
[Epoch 53]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.884 (Best: 0.900 @epoch 51)
Total time: 49.06s

[Epoch 54]	Learning rate: 1.00e-7
[Epoch 54]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0007]	25.5+0.3s
[4500/18000]	[VGG22: 0.0007]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.896 (Best: 0.900 @epoch 51)
Total time: 49.07s

[Epoch 55]	Learning rate: 1.00e-7
[Epoch 55]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0007]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0007]	25.6+0.3s
[14400/18000]	[VGG22: 0.0007]	25.6+0.3s
[15300/18000]	[VGG22: 0.0007]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.896 (Best: 0.900 @epoch 51)
Total time: 49.02s

[Epoch 56]	Learning rate: 1.00e-7
[Epoch 56]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.886 (Best: 0.900 @epoch 51)
Total time: 49.00s

[Epoch 57]	Learning rate: 1.00e-7
[Epoch 57]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.8+0.3s
[1800/18000]	[VGG22: 0.0007]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.4+0.3s
[9000/18000]	[VGG22: 0.0006]	25.4+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.900 @epoch 51)
Total time: 49.06s

[Epoch 58]	Learning rate: 1.00e-7
[Epoch 58]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0007]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0007]	25.6+0.3s
[9900/18000]	[VGG22: 0.0007]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0007]	25.6+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.897 (Best: 0.900 @epoch 51)
Total time: 49.05s

[Epoch 59]	Learning rate: 1.00e-7
[Epoch 59]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.6+0.3s
[1800/18000]	[VGG22: 0.0007]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0007]	25.5+0.3s
[17100/18000]	[VGG22: 0.0007]	25.6+0.3s
[18000/18000]	[VGG22: 0.0007]	25.8+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.883 (Best: 0.900 @epoch 51)
Total time: 49.03s

[Epoch 60]	Learning rate: 1.00e-7
[Epoch 60]	Learning rate of rec: 1.00e-3
[900/18000]	[VGG22: 0.0007]	25.7+0.3s
[1800/18000]	[VGG22: 0.0007]	25.8+0.3s
[2700/18000]	[VGG22: 0.0007]	25.7+0.3s
[3600/18000]	[VGG22: 0.0007]	25.7+0.3s
[4500/18000]	[VGG22: 0.0007]	25.7+0.3s
[5400/18000]	[VGG22: 0.0007]	25.7+0.3s
[6300/18000]	[VGG22: 0.0007]	25.8+0.3s
[7200/18000]	[VGG22: 0.0007]	25.7+0.3s
[8100/18000]	[VGG22: 0.0007]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.8+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.898 (Best: 0.900 @epoch 51)
Total time: 49.03s

[Epoch 61]	Learning rate: 1.00e-7
[Epoch 61]	Learning rate of rec: 1.00e-7
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.5+0.3s
[11700/18000]	[VGG22: 0.0006]	25.5+0.3s
[12600/18000]	[VGG22: 0.0006]	25.5+0.3s
[13500/18000]	[VGG22: 0.0006]	25.5+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.5+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 48.94s

[Epoch 62]	Learning rate: 1.00e-7
[Epoch 62]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0007]	25.5+0.3s
[1800/18000]	[VGG22: 0.0006]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.4+0.3s
[3600/18000]	[VGG22: 0.0006]	25.4+0.3s
[4500/18000]	[VGG22: 0.0006]	25.4+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.5+0.3s
[8100/18000]	[VGG22: 0.0006]	25.5+0.3s
[9000/18000]	[VGG22: 0.0006]	25.5+0.3s
[9900/18000]	[VGG22: 0.0006]	25.5+0.3s
[10800/18000]	[VGG22: 0.0006]	25.5+0.3s
[11700/18000]	[VGG22: 0.0006]	25.5+0.3s
[12600/18000]	[VGG22: 0.0006]	25.5+0.3s
[13500/18000]	[VGG22: 0.0006]	25.5+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.5+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.06s

[Epoch 63]	Learning rate: 1.00e-7
[Epoch 63]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.8+0.3s
[9900/18000]	[VGG22: 0.0006]	26.0+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.8+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.8+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.8+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.04s

[Epoch 64]	Learning rate: 1.00e-7
[Epoch 64]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.6+0.3s
[3600/18000]	[VGG22: 0.0006]	25.6+0.3s
[4500/18000]	[VGG22: 0.0006]	25.6+0.3s
[5400/18000]	[VGG22: 0.0006]	25.6+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.5+0.3s
[15300/18000]	[VGG22: 0.0006]	25.5+0.3s
[16200/18000]	[VGG22: 0.0006]	25.5+0.3s
[17100/18000]	[VGG22: 0.0006]	25.5+0.3s
[18000/18000]	[VGG22: 0.0006]	25.5+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.896 (Best: 0.900 @epoch 51)
Total time: 49.07s

[Epoch 65]	Learning rate: 1.00e-7
[Epoch 65]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0007]	25.5+0.3s
[1800/18000]	[VGG22: 0.0007]	25.5+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.8+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.8+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.06s

[Epoch 66]	Learning rate: 1.00e-7
[Epoch 66]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.8+0.3s
[1800/18000]	[VGG22: 0.0006]	25.8+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.8+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.7+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.8+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.7+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.02s

[Epoch 67]	Learning rate: 1.00e-7
[Epoch 67]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.8+0.3s
[1800/18000]	[VGG22: 0.0006]	25.8+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.9+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.896 (Best: 0.900 @epoch 51)
Total time: 49.01s

[Epoch 68]	Learning rate: 1.00e-7
[Epoch 68]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.5+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.6+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.6+0.3s
[18000/18000]	[VGG22: 0.0006]	25.6+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.03s

[Epoch 69]	Learning rate: 1.00e-7
[Epoch 69]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.6+0.3s
[1800/18000]	[VGG22: 0.0006]	25.6+0.3s
[2700/18000]	[VGG22: 0.0006]	25.5+0.3s
[3600/18000]	[VGG22: 0.0006]	25.5+0.3s
[4500/18000]	[VGG22: 0.0006]	25.5+0.3s
[5400/18000]	[VGG22: 0.0006]	25.5+0.3s
[6300/18000]	[VGG22: 0.0006]	25.6+0.3s
[7200/18000]	[VGG22: 0.0006]	25.6+0.3s
[8100/18000]	[VGG22: 0.0006]	25.6+0.3s
[9000/18000]	[VGG22: 0.0006]	25.6+0.3s
[9900/18000]	[VGG22: 0.0006]	25.6+0.3s
[10800/18000]	[VGG22: 0.0006]	25.6+0.3s
[11700/18000]	[VGG22: 0.0006]	25.6+0.3s
[12600/18000]	[VGG22: 0.0006]	25.6+0.3s
[13500/18000]	[VGG22: 0.0006]	25.5+0.3s
[14400/18000]	[VGG22: 0.0006]	25.6+0.3s
[15300/18000]	[VGG22: 0.0006]	25.6+0.3s
[16200/18000]	[VGG22: 0.0006]	25.6+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.895 (Best: 0.900 @epoch 51)
Total time: 49.07s

[Epoch 70]	Learning rate: 1.00e-7
[Epoch 70]	Learning rate of rec: 1.00e-5
[900/18000]	[VGG22: 0.0006]	25.7+0.3s
[1800/18000]	[VGG22: 0.0006]	25.7+0.3s
[2700/18000]	[VGG22: 0.0006]	25.7+0.3s
[3600/18000]	[VGG22: 0.0006]	25.7+0.3s
[4500/18000]	[VGG22: 0.0006]	25.7+0.3s
[5400/18000]	[VGG22: 0.0006]	25.7+0.3s
[6300/18000]	[VGG22: 0.0006]	25.7+0.3s
[7200/18000]	[VGG22: 0.0006]	25.7+0.3s
[8100/18000]	[VGG22: 0.0006]	25.7+0.3s
[9000/18000]	[VGG22: 0.0006]	25.7+0.3s
[9900/18000]	[VGG22: 0.0006]	25.7+0.3s
[10800/18000]	[VGG22: 0.0006]	25.7+0.3s
[11700/18000]	[VGG22: 0.0006]	25.7+0.3s
[12600/18000]	[VGG22: 0.0006]	25.8+0.3s
[13500/18000]	[VGG22: 0.0006]	25.7+0.3s
[14400/18000]	[VGG22: 0.0006]	25.7+0.3s
[15300/18000]	[VGG22: 0.0006]	25.7+0.3s
[16200/18000]	[VGG22: 0.0006]	25.8+0.3s
[17100/18000]	[VGG22: 0.0006]	25.7+0.3s
[18000/18000]	[VGG22: 0.0006]	25.7+0.3s

Evaluation:
[eval15 x1]	PSNR: 0.894 (Best: 0.900 @epoch 51)
Total time: 49.06s

Mainnet(
  (lnet): Lnet(
    (conv1): Sequential(
      (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
    )
    (conv2): Sequential(
      (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (rnet): Rnet(
    (relu): ReLU(inplace=True)
    (resm1): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm2): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm3): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
    (resm4): Sequential(
      (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): ReflectionPad2d((1, 1, 1, 1))
      (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
    )
  )
  (l_stage): Sequential(
    (0): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (2): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (3): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (4): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (5): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (6): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (7): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (9): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (12): Lnet(
      (conv1): Sequential(
        (0): Conv2d(34, 34, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): LeakyReLU(negative_slope=0.01, inplace=True)
      )
      (conv2): Sequential(
        (0): Conv2d(66, 34, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (r_stage): Sequential(
    (0): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (1): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (2): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (3): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (4): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (5): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (6): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (7): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (8): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (9): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (10): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (11): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
    (12): Rnet(
      (relu): ReLU(inplace=True)
      (resm1): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm2): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm3): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
      (resm4): Sequential(
        (0): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
        (1): ReLU(inplace=True)
        (2): ReflectionPad2d((1, 1, 1, 1))
        (3): Conv2d(35, 35, kernel_size=(3, 3), stride=(1, 1))
      )
    )
  )
  (conv_l): Conv2d(1, 29, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
  (conv_r): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
)
Mainnet(
  (renet): Renet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res3): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res4): Sequential(
      (0): Conv2d(4, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU()
      (2): Conv2d(32, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
  )
  (lenet): Lenet(
    (relu): ReLU(inplace=True)
    (res1): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (res2): Sequential(
      (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): ReLU(inplace=True)
      (2): Conv2d(32, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
    )
    (scale): Sequential(
      (0): Linear(in_features=1, out_features=100, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=100, out_features=1, bias=True)
      (3): Sigmoid()
    )
  )
  (scale): Scale(
    (conv1): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), padding_mode=reflect)
      (1): LeakyReLU(negative_slope=0.01, inplace=True)
      (2): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1), padding_mode=reflect)
      (3): Sigmoid()
    )
  )
)

Evaluation:
[eval15 x1]	PSNR: 0.900 (Best: 0.900 @epoch 2)
Total time: 66.86s

